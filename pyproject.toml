[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "startmcp"
version = "0.1.0"
description = "A flexible MCP (Model Context Protocol) client framework for connecting AI tools to your data and systems"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "startmcp contributors"}
]
keywords = ["mcp", "model-context-protocol", "ai", "claude", "integration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",

    # HTTP and async
    "httpx>=0.27.0",
    "httpx-sse>=0.4.0",
    "aiohttp>=3.9.0",
    "sse-starlette>=2.0.0",
    "anyio>=4.0.0",

    # CLI
    "typer[all]>=0.12.0",
    "questionary>=2.0.0",
    "rich>=13.0.0",

    # OAuth and security
    "authlib>=1.3.0",
    "cryptography>=42.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "types-pyyaml",
    "types-requests",
]

[project.scripts]
mcp = "mcp.cli.main:app"

[project.urls]
Homepage = "https://github.com/yourusername/startmcp"
Documentation = "https://github.com/yourusername/startmcp/blob/main/README.md"
Repository = "https://github.com/yourusername/startmcp"
Issues = "https://github.com/yourusername/startmcp/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp*", "provider_mcps*"]
namespaces = false

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--cov=mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-v"
]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
